测试通信
client-1 :203
恢复程序：（replica 2）
Self-heal Daemon on localhost               N/A       N/A        Y       13798
root     13798     1  0 03:32 ?        00:00:00 /usr/local/sbin/glusterfs -s localhost --volfile-id gluster/glustershd -p /var/run/gluster/glustershd/glustershd.pid -l /var/log/glusterfs/glustershd.log -S /var/run/gluster/97800b8165af4b40f558270570b916f4.socket --xlator-option *replicate*.node-uuid=b9e42dbc-c2cf-4abb-866a-9037e8269f58
与glusterd互连
tcp        0      0 127.0.0.1:24007         127.0.0.1:49148         ESTABLISHED 1335/glusterd        keepalive (2.06/0/0)
tcp        0      0 127.0.0.1:49148         127.0.0.1:24007         ESTABLISHED 13798/glusterfs      keepalive (2.09/0/0)
与glusterfsd互连
tcp        0      0 127.0.0.1:49151         20.20.20.203:49153      ESTABLISHED 13798/glusterfs      keepalive (1.45/0/0)
tcp        0      0 20.20.20.203:49153      127.0.0.1:49151         ESTABLISHED 13778/glusterfsd     keepalive (1.51/0/0)
连接client-2的brick进程
tcp        0      0 20.20.20.203:49150      20.20.20.202:49153      ESTABLISHED 13798/glusterfs      keepalive (2.15/0/0)
没有tcp的监听端口，但有unix的监听端口 应该是cli向其发送命令
unix  2      [ ACC ]     STREAM     LISTENING     50729    13798/glusterfs      /var/run/gluster/97800b8165af4b40f558270570b916f4.socket

恢复程序是由cli启动复制卷或纠删卷时启动，即由glusterd去加载，和glusterfsd的启动流程应该差不多

glusterd_svc_start -> glusterd_shdsvc_start -> glusterd_shdsvc_manager -->glusterd_svcs_manager --> glusterd_restart_bricks或者glusterd_op_start_volume
==================================================================================================
==================================================================================================
启动之后 当触发点条件满足时，走什么流程？

1. 2:1的纠删卷，glusterfs恢复程序共有5个xlator
(gdb) p *graph
$1 = {list = {next = 0x7fffe4003f90, prev = 0x7fffe4003f90}, graph_uuid = "node1-18690-2018-11-14-06:04:35:433003", '\000' <repeats 89 times>, dob = {tv_sec = 1542175475, tv_usec = 433002}, 
  first = 0x7fffe4010c60, top = 0x7fffe4010c60, leaf_count = 3, xl_count = 5, id = 0, used = 0, volfile_checksum = 0}
(gdb) p *((xlator_t *)graph->first)
$2 = {name = 0x7fffe400e1f0 "glustershd", type = 0x7fffe400fd10 "debug/io-stats", instance_name = 0x0, next = 0x7fffe400f050, prev = 0x0, parents = 0x0, children = 0x7fffe4012230, 
  options = 0x7fffe40117f0, dlhandle = 0x7fffe40119c0, fops = 0x7fffea3783a0 <fops>, cbks = 0x7fffea378340 <cbks>, dumpops = 0x7fffea3786e0 <dumpops>, volume_options = {
    next = 0x7fffe4012070, prev = 0x7fffe4012070}, fini = 0x7fffea1714c0 <fini>, init = 0x7fffea170f70 <init>, reconfigure = 0x7fffea170ba0 <reconfigure>, 
  mem_acct_init = 0x7fffea170eb0 <mem_acct_init>, notify = 0x7fffea171520 <notify>, loglevel = GF_LOG_NONE, latencies = {{min = 0, max = 0, total = 0, std = 0, mean = 0, 
      count = 0} <repeats 55 times>}, history = 0x0, ctx = 0x616010, graph = 0x7fffe4003f90, itable = 0x0, init_succeeded = 0 '\000', private = 0x0, mem_acct = 0x0, winds = 0, 
  switched = 0 '\000', local_pool = 0x0, is_autoloaded = _gf_false, volfile_id = 0x0, xl_id = 5}
(gdb) p *((xlator_t *)graph->first)->next
$3 = {name = 0x7fffe400ec30 "vg0-disperse-0", type = 0x7fffe4008eb0 "cluster/disperse", instance_name = 0x0, next = 0x7fffe400cd70, prev = 0x7fffe4010c60, parents = 0x7fffe4010840, 
  children = 0x7fffe4010a80, options = 0x7fffe400fbe0, dlhandle = 0x7fffe400fdb0, fops = 0x7fffea5e42c0 <fops>, cbks = 0x7fffea5e4260 <cbks>, dumpops = 0x7fffea5e4200 <dumpops>, 
  volume_options = {next = 0x7fffe4010420, prev = 0x7fffe4010420}, fini = 0x7fffea38a5a0 <fini>, init = 0x7fffea389e90 <init>, reconfigure = 0x7fffea389480 <reconfigure>, 
  mem_acct_init = 0x7fffea3893c0 <mem_acct_init>, notify = 0x7fffea389e60 <notify>, loglevel = GF_LOG_NONE, latencies = {{min = 0, max = 0, total = 0, std = 0, mean = 0, 
      count = 0} <repeats 55 times>}, history = 0x0, ctx = 0x616010, graph = 0x7fffe4003f90, itable = 0x0, init_succeeded = 0 '\000', private = 0x0, mem_acct = 0x0, winds = 0, 
  switched = 0 '\000', local_pool = 0x0, is_autoloaded = _gf_false, volfile_id = 0x0, xl_id = 4}
(gdb) p *((xlator_t *)graph->first)->next->next
$4 = {name = 0x7fffe400c950 "vg0-client-2", type = 0x7fffe400bf10 "protocol/client", instance_name = 0x0, next = 0x7fffe400aa90, prev = 0x7fffe400f050, parents = 0x7fffe4010ba0, 
  children = 0x0, options = 0x7fffe400d900, dlhandle = 0x7fffe4008f50, fops = 0x7fffea852aa0 <fops>, cbks = 0x7fffea852de0 <cbks>, dumpops = 0x7fffea852a40 <dumpops>, volume_options = {
    next = 0x7fffe400da30, prev = 0x7fffe400da30}, fini = 0x7fffea60d220 <fini>, init = 0x7fffea60cfa0 <init>, reconfigure = 0x7fffea60cd60 <reconfigure>, 
  mem_acct_init = 0x7fffea60be20 <mem_acct_init>, notify = 0x7fffea60b9c0 <notify>, loglevel = GF_LOG_NONE, latencies = {{min = 0, max = 0, total = 0, std = 0, mean = 0, 
      count = 0} <repeats 55 times>}, history = 0x0, ctx = 0x616010, graph = 0x7fffe4003f90, itable = 0x0, init_succeeded = 0 '\000', private = 0x0, mem_acct = 0x0, winds = 0, 
  switched = 0 '\000', local_pool = 0x0, is_autoloaded = _gf_false, volfile_id = 0x0, xl_id = 3}
(gdb) p *((xlator_t *)graph->first)->next->next->next
$5 = {name = 0x7fffe400a670 "vg0-client-1", type = 0x7fffe4009c30 "protocol/client", instance_name = 0x0, next = 0x7fffe4008300, prev = 0x7fffe400cd70, parents = 0x7fffe4010ae0, 
  children = 0x0, options = 0x7fffe400b620, dlhandle = 0x7fffe4008f50, fops = 0x7fffea852aa0 <fops>, cbks = 0x7fffea852de0 <cbks>, dumpops = 0x7fffea852a40 <dumpops>, volume_options = {
    next = 0x7fffe400b750, prev = 0x7fffe400b750}, fini = 0x7fffea60d220 <fini>, init = 0x7fffea60cfa0 <init>, reconfigure = 0x7fffea60cd60 <reconfigure>, 
  mem_acct_init = 0x7fffea60be20 <mem_acct_init>, notify = 0x7fffea60b9c0 <notify>, loglevel = GF_LOG_NONE, latencies = {{min = 0, max = 0, total = 0, std = 0, mean = 0, 
      count = 0} <repeats 55 times>}, history = 0x0, ctx = 0x616010, graph = 0x7fffe4003f90, itable = 0x0, init_succeeded = 0 '\000', private = 0x0, mem_acct = 0x0, winds = 0, 
  switched = 0 '\000', local_pool = 0x0, is_autoloaded = _gf_false, volfile_id = 0x0, xl_id = 2}
(gdb) p *((xlator_t *)graph->first)->next->next->next->next
$6 = {name = 0x7fffe4002230 "vg0-client-0", type = 0x7fffe4002290 "protocol/client", instance_name = 0x0, next = 0x0, prev = 0x7fffe400aa90, parents = 0x7fffe4010490, children = 0x0, 
  options = 0x7fffe4002070, dlhandle = 0x7fffe4008f50, fops = 0x7fffea852aa0 <fops>, cbks = 0x7fffea852de0 <cbks>, dumpops = 0x7fffea852a40 <dumpops>, volume_options = {
    next = 0x7fffe4009620, prev = 0x7fffe4009620}, fini = 0x7fffea60d220 <fini>, init = 0x7fffea60cfa0 <init>, reconfigure = 0x7fffea60cd60 <reconfigure>, 
  mem_acct_init = 0x7fffea60be20 <mem_acct_init>, notify = 0x7fffea60b9c0 <notify>, loglevel = GF_LOG_NONE, latencies = {{min = 0, max = 0, total = 0, std = 0, mean = 0, 
      count = 0} <repeats 55 times>}, history = 0x0, ctx = 0x616010, graph = 0x7fffe4003f90, itable = 0x0, init_succeeded = 0 '\000', private = 0x0, mem_acct = 0x0, winds = 0, 
  switched = 0 '\000', local_pool = 0x0, is_autoloaded = _gf_false, volfile_id = 0x0, xl_id = 1}
 2. ec_heal_op
	ec_shd_index_healer()
	while(1)
	2.1 ec_shd_healer_wait() 等待间隔，默认60
	2.2 如果brick上线数 大于 数据盘数 开始ec_shd_index_sweep   
		
		2.2.1 ec_shd_index_inode  
			syncop_lookup -> syncop_opendir -> syncop_readdir(获取到xattrop下的文件)-> syncop_getxattr
		2.2.2 syncop_mt_dir_scan ->ec_shd_index_heal   开始执行具体修复
			ec_shd_index_heal -> syncop_getxattr -> ec_gf_getxattr -> ec_getxattr
			cluster_lookup ->  client3_3_inodelk  非修复节点则 client3_3_inodelk_cbk返回失败remote operation failed[resource temporarily unavailable]
	ec_shd_full_healer
    while(1)
	2.3 ec_shd_healer_wait()
	2.4 如果brick上线数 大于 数据盘数 开始ec_shd_full_sweep
		
***************************************************
清理缓存之后再去gdb
echo 1 > /proc/sys/vm/drop_caches
echo 2 > /proc/sys/vm/drop_caches
echo 3 > /proc/sys/vm/drop_caches
gdb
b 2514 守护进程
b graph.c:665(可以看到graph的子集)p *((xlator_t *)graph->first)->next->next
b ec.c:845
r 按照原始程序运行时带的参数